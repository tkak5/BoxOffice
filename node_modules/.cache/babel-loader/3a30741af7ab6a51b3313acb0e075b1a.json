{"ast":null,"code":"var _jsxFileName = \"/Users/tkak/sample/react2/my-app/src/components/ajax.js\";\nimport React from 'react';\nimport Sort from './sort';\n\nclass Ajax extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      year: \"2019\",\n      error: null,\n      isLoaded: false,\n      movies: []\n    };\n    this.handleChange = this.handleChange.bind(this);\n  }\n\n  handleChange(event) {\n    this.setState({\n      year: event.target.value\n    });\n  }\n\n  componentDidMount() {\n    fetch(\"https://tkak5.github.io/movie/year_list.json\").then(response => {\n      if (response.ok) {\n        response.json().then(json => this.setState({\n          isLoaded: true,\n          movies: json\n        }));\n      } else {\n        this.setState({\n          isLoaded: true,\n          error: response\n        });\n      }\n    });\n  }\n\n  renderSort() {\n    if (this.state.error) {\n      return React.createElement(\"div\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 41\n        },\n        __self: this\n      }, \"Error: \", this.state.error.message);\n    } else if (!this.state.isLoaded) {\n      return React.createElement(\"div\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 43\n        },\n        __self: this\n      }, \"Loading...\");\n    } else {\n      return React.createElement(Sort, {\n        movies: this.state.movies,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 46\n        },\n        __self: this\n      });\n    }\n  }\n\n  render() {\n    return React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 55\n      },\n      __self: this\n    }, this.renderSort());\n  }\n\n}\n\nexport default Ajax;","map":{"version":3,"sources":["/Users/tkak/sample/react2/my-app/src/components/ajax.js"],"names":["React","Sort","Ajax","Component","constructor","props","state","year","error","isLoaded","movies","handleChange","bind","event","setState","target","value","componentDidMount","fetch","then","response","ok","json","renderSort","message","render"],"mappings":";AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,OAAOC,IAAP,MAAiB,QAAjB;;AAGA,MAAMC,IAAN,SAAmBF,KAAK,CAACG,SAAzB,CAAmC;AACjCC,EAAAA,WAAW,CAACC,KAAD,EAAQ;AACjB,UAAMA,KAAN;AACA,SAAKC,KAAL,GAAa;AACXC,MAAAA,IAAI,EAAE,MADK;AAEXC,MAAAA,KAAK,EAAE,IAFI;AAGXC,MAAAA,QAAQ,EAAE,KAHC;AAIXC,MAAAA,MAAM,EAAE;AAJG,KAAb;AAMA,SAAKC,YAAL,GAAoB,KAAKA,YAAL,CAAkBC,IAAlB,CAAuB,IAAvB,CAApB;AACD;;AAEDD,EAAAA,YAAY,CAACE,KAAD,EAAQ;AAClB,SAAKC,QAAL,CAAc;AAACP,MAAAA,IAAI,EAAEM,KAAK,CAACE,MAAN,CAAaC;AAApB,KAAd;AACD;;AAEDC,EAAAA,iBAAiB,GAAG;AAClBC,IAAAA,KAAK,CAAC,8CAAD,CAAL,CACEC,IADF,CACQC,QAAD,IAAc;AAAC,UAAGA,QAAQ,CAACC,EAAZ,EAAgB;AAClCD,QAAAA,QAAQ,CAACE,IAAT,GAAgBH,IAAhB,CAAsBG,IAAD,IACnB,KAAKR,QAAL,CAAc;AACZL,UAAAA,QAAQ,EAAE,IADE;AAEZC,UAAAA,MAAM,EAAEY;AAFI,SAAd,CADF;AAMD,OAPmB,MAOb;AACL,aAAKR,QAAL,CAAc;AACZL,UAAAA,QAAQ,EAAE,IADE;AAEZD,UAAAA,KAAK,EAAEY;AAFK,SAAd;AAID;AACF,KAdD;AAeD;;AAEDG,EAAAA,UAAU,GAAG;AACX,QAAI,KAAKjB,KAAL,CAAWE,KAAf,EAAsB;AACpB,aAAO;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBAAa,KAAKF,KAAL,CAAWE,KAAX,CAAiBgB,OAA9B,CAAP;AACD,KAFD,MAEO,IAAI,CAAC,KAAKlB,KAAL,CAAWG,QAAhB,EAA0B;AAC/B,aAAO;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,sBAAP;AACD,KAFM,MAEA;AACL,aACE,oBAAC,IAAD;AACE,QAAA,MAAM,EAAE,KAAKH,KAAL,CAAWI,MADrB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QADF;AAKD;AACF;;AAEDe,EAAAA,MAAM,GAAG;AACP,WACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACG,KAAKF,UAAL,EADH,CADF;AAKD;;AAtDgC;;AAyDnC,eAAerB,IAAf","sourcesContent":["import React from 'react';\nimport Sort from './sort';\n\n\nclass Ajax extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      year: \"2019\",\n      error: null,\n      isLoaded: false,\n      movies: [],\n    };\n    this.handleChange = this.handleChange.bind(this);\n  }\n\n  handleChange(event) {\n    this.setState({year: event.target.value});\n  }\n\n  componentDidMount() {\n    fetch(\"https://tkak5.github.io/movie/year_list.json\"\n    ).then((response) => {if(response.ok) {\n        response.json().then((json) =>\n          this.setState({\n            isLoaded: true,\n            movies: json,\n          })\n        )\n      } else {\n        this.setState({\n          isLoaded: true,\n          error: response\n        });\n      }\n    });\n  }\n\n  renderSort() {\n    if (this.state.error) {\n      return <div>Error: {this.state.error.message}</div>\n    } else if (!this.state.isLoaded) {\n      return <div>Loading...</div>\n    } else {\n      return (\n        <Sort\n          movies={this.state.movies}\n        />\n      );\n    }\n  }\n\n  render() {\n    return(\n      <div>\n        {this.renderSort()}\n      </div>\n    );\n  }\n}\n\nexport default Ajax;\n"]},"metadata":{},"sourceType":"module"}