{"ast":null,"code":"var _jsxFileName = \"/Users/tkak/sample/react2/my-app/src/sort.js\";\nimport React, { useState, useMemo } from 'react';\nimport Movie from './index';\nimport Button from './button';\n\nconst Sort = props => {\n  const [sort, setSort] = useState([]);\n  const KEYS = [\"rank\", \"title\", \"income\"];\n  /*\n    const sortedMovies = useMemo(() => {\n      let _sortedMovies = props.movies.movies;\n      if (sort.key) {\n        _sortedMovies = _sortedMovies.sort((a,b) => {\n          a = a[sort.key];\n          b = b[sort.key];\n  \n          if (a===b) {\n            return 0;\n          }\n          if (a > b) {\n            return 1 * sort.order;\n          }\n          if (a < b) {\n            return -1 * sort.order;\n          }\n        });\n      }\n      return _sortedMovies;\n    }, [sort]);\n    */\n\n  const handleSort = key => {\n    if (sort.key === key) {\n      setSort({ ...sort,\n        order: -sort.order\n      });\n    } else {\n      setSort({\n        key: key,\n        order: 1\n      });\n    }\n  };\n\n  return React.createElement(\"div\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 45\n    },\n    __self: this\n  }, React.createElement(\"div\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 46\n    },\n    __self: this\n  }, KEYS.map((key, index) => React.createElement(Button, {\n    key: index,\n    button: key,\n    sort: sort,\n    handleSort: handleSort,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 48\n    },\n    __self: this\n  }))), React.createElement(\"div\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 57\n    },\n    __self: this\n  }, React.createElement(Movie, {\n    error: props.error,\n    isLoaded: props.isLoaded,\n    movies: props.movies,\n    max: props.movies[\"max\"],\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 58\n    },\n    __self: this\n  })));\n};\n\nexport default Sort;","map":{"version":3,"sources":["/Users/tkak/sample/react2/my-app/src/sort.js"],"names":["React","useState","useMemo","Movie","Button","Sort","props","sort","setSort","KEYS","handleSort","key","order","map","index","error","isLoaded","movies"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,QAAhB,EAA0BC,OAA1B,QAAyC,OAAzC;AACA,OAAOC,KAAP,MAAkB,SAAlB;AACA,OAAOC,MAAP,MAAmB,UAAnB;;AAGA,MAAMC,IAAI,GAAIC,KAAD,IAAW;AACtB,QAAM,CAACC,IAAD,EAAOC,OAAP,IAAkBP,QAAQ,CAAC,EAAD,CAAhC;AAEA,QAAMQ,IAAI,GAAG,CAAC,MAAD,EAAS,OAAT,EAAkB,QAAlB,CAAb;AACF;;;;;;;;;;;;;;;;;;;;;;;AAuBE,QAAMC,UAAU,GAAIC,GAAD,IAAS;AAC1B,QAAIJ,IAAI,CAACI,GAAL,KAAaA,GAAjB,EAAsB;AACpBH,MAAAA,OAAO,CAAC,EAAC,GAAGD,IAAJ;AAAUK,QAAAA,KAAK,EAAE,CAACL,IAAI,CAACK;AAAvB,OAAD,CAAP;AACD,KAFD,MAEO;AACLJ,MAAAA,OAAO,CAAC;AACNG,QAAAA,GAAG,EAAEA,GADC;AAENC,QAAAA,KAAK,EAAE;AAFD,OAAD,CAAP;AAID;AACF,GATD;;AAWC,SACC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACGH,IAAI,CAACI,GAAL,CAAS,CAACF,GAAD,EAAMG,KAAN,KACR,oBAAC,MAAD;AACE,IAAA,GAAG,EAAEA,KADP;AAEE,IAAA,MAAM,EAAEH,GAFV;AAGE,IAAA,IAAI,EAAEJ,IAHR;AAIE,IAAA,UAAU,EAAEG,UAJd;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADD,CADH,CADF,EAYE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE,oBAAC,KAAD;AACE,IAAA,KAAK,EAAEJ,KAAK,CAACS,KADf;AAEE,IAAA,QAAQ,EAAET,KAAK,CAACU,QAFlB;AAGE,IAAA,MAAM,EAAEV,KAAK,CAACW,MAHhB;AAIE,IAAA,GAAG,EAAEX,KAAK,CAACW,MAAN,CAAa,KAAb,CAJP;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADF,CAZF,CADD;AAwBF,CA9DD;;AAgEA,eAAeZ,IAAf","sourcesContent":["import React, { useState, useMemo } from 'react';\nimport Movie from './index';\nimport Button from './button';\n\n\nconst Sort = (props) => {\n  const [sort, setSort] = useState([])\n\n  const KEYS = [\"rank\", \"title\", \"income\"];\n/*\n  const sortedMovies = useMemo(() => {\n    let _sortedMovies = props.movies.movies;\n    if (sort.key) {\n      _sortedMovies = _sortedMovies.sort((a,b) => {\n        a = a[sort.key];\n        b = b[sort.key];\n\n        if (a===b) {\n          return 0;\n        }\n        if (a > b) {\n          return 1 * sort.order;\n        }\n        if (a < b) {\n          return -1 * sort.order;\n        }\n      });\n    }\n    return _sortedMovies;\n  }, [sort]);\n  */\n\n  const handleSort = (key) => {\n    if (sort.key === key) {\n      setSort({...sort, order: -sort.order });\n    } else {\n      setSort({\n        key: key,\n        order: 1\n      })\n    }\n  };\n\n   return(\n    <div>\n      <div>\n        {KEYS.map((key, index) => (\n          <Button\n            key={index}\n            button={key}\n            sort={sort}\n            handleSort={handleSort}\n          />\n        ))\n        }\n      </div>\n      <div>\n        <Movie\n          error={props.error}\n          isLoaded={props.isLoaded}\n          movies={props.movies}\n          max={props.movies[\"max\"]}\n        />\n      </div>\n    </div>\n\n   );\n}\n\nexport default Sort;\n\n"]},"metadata":{},"sourceType":"module"}