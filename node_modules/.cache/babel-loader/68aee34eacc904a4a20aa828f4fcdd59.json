{"ast":null,"code":"var _jsxFileName = \"/Users/tkak/sample/react2/my-app/src/index.js\";\nimport React from 'react';\nimport ReactDOM from 'react-dom';\nimport styled from 'styled-components';\nconst Bar = styled.div`\n  background-color: red;\n  color: white;\n`;\nconst Container = styled.div`\n  display: flex;\n  width: 100%;\n`;\nconst Left_box = styled.div`\n`;\nconst Right_box = styled.div`\n  display: flex;\n`;\n\nclass Movie extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {};\n  }\n\n  render() {\n    return React.createElement(\"li\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 28\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 29\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 30\n      },\n      __self: this\n    }, this.props.name), React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 33\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      style: {\n        color: \"hotpink\"\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 34\n      },\n      __self: this\n    }, this.props.money))));\n  }\n\n}\n\nclass MyComponent extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      error: null,\n      isLoaded: false,\n      movies: []\n    };\n  }\n\n  componentDidMount() {\n    fetch(\"https://tkak5.github.io/movie/data/2019.json\").then(response => {\n      if (response.ok) {\n        response.json().then(json => this.setState({\n          isLoaded: true,\n          movies: json[\"movies\"],\n          max: json[\"max\"]\n        }));\n      } else {\n        this.setState({\n          isLoaded: true,\n          error: response\n        });\n      }\n    });\n  }\n\n  componentDidUpdate() {\n    var movie_list = this.state.movies;\n\n    for (var i; i < movie_list.length; i++) {\n      var movie_color = document.getElementById(movie_list[i]['title']);\n      movie_color.style.color = 'hotpink';\n    }\n  }\n\n  render() {\n    const {\n      error,\n      isLoaded,\n      movies,\n      max\n    } = this.state;\n\n    if (error) {\n      return React.createElement(\"div\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 85\n        },\n        __self: this\n      }, \"Error: \", error.message);\n    } else if (!isLoaded) {\n      return React.createElement(\"div\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 87\n        },\n        __self: this\n      }, \"Loading...\");\n    } else {\n      return React.createElement(\"ul\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 90\n        },\n        __self: this\n      }, movies.map(movie => React.createElement(Movie, {\n        name: movie.title,\n        money: movie.worldwide,\n        ratio: movie.worldwide / max,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 92\n        },\n        __self: this\n      })));\n    }\n  }\n\n} // ========================================\n\n\nReactDOM.render(React.createElement(MyComponent, {\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 107\n  },\n  __self: this\n}), document.getElementById('root'));","map":{"version":3,"sources":["/Users/tkak/sample/react2/my-app/src/index.js"],"names":["React","ReactDOM","styled","Bar","div","Container","Left_box","Right_box","Movie","Component","constructor","props","state","render","name","color","money","MyComponent","error","isLoaded","movies","componentDidMount","fetch","then","response","ok","json","setState","max","componentDidUpdate","movie_list","i","length","movie_color","document","getElementById","style","message","map","movie","title","worldwide"],"mappings":";AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,OAAOC,QAAP,MAAqB,WAArB;AACA,OAAOC,MAAP,MAAmB,mBAAnB;AAEA,MAAMC,GAAG,GAAGD,MAAM,CAACE,GAAI;;;CAAvB;AAKA,MAAMC,SAAS,GAAGH,MAAM,CAACE,GAAI;;;CAA7B;AAIA,MAAME,QAAQ,GAAGJ,MAAM,CAACE,GAAI;CAA5B;AAEA,MAAMG,SAAS,GAAGL,MAAM,CAACE,GAAI;;CAA7B;;AAIA,MAAMI,KAAN,SAAoBR,KAAK,CAACS,SAA1B,CAAoC;AAClCC,EAAAA,WAAW,CAACC,KAAD,EAAQ;AACjB,UAAMA,KAAN;AACA,SAAKC,KAAL,GAAa,EAAb;AAED;;AACDC,EAAAA,MAAM,GAAG;AACP,WACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACG,KAAKF,KAAL,CAAWG,IADd,CADF,EAIE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACE;AAAK,MAAA,KAAK,EAAE;AAACC,QAAAA,KAAK,EAAC;AAAP,OAAZ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACG,KAAKJ,KAAL,CAAWK,KADd,CADF,CAJF,CADF,CADF;AAcD;;AArBiC;;AAyBpC,MAAMC,WAAN,SAA0BjB,KAAK,CAACS,SAAhC,CAA0C;AACxCC,EAAAA,WAAW,CAACC,KAAD,EAAQ;AACjB,UAAMA,KAAN;AACA,SAAKC,KAAL,GAAa;AACXM,MAAAA,KAAK,EAAE,IADI;AAEXC,MAAAA,QAAQ,EAAE,KAFC;AAGXC,MAAAA,MAAM,EAAE;AAHG,KAAb;AAKD;;AAEDC,EAAAA,iBAAiB,GAAG;AAClBC,IAAAA,KAAK,CAAC,8CAAD,CAAL,CACEC,IADF,CACQC,QAAD,IAAc;AAAC,UAAGA,QAAQ,CAACC,EAAZ,EAAgB;AAClCD,QAAAA,QAAQ,CAACE,IAAT,GAAgBH,IAAhB,CAAsBG,IAAD,IACnB,KAAKC,QAAL,CAAc;AACZR,UAAAA,QAAQ,EAAE,IADE;AAEZC,UAAAA,MAAM,EAAEM,IAAI,CAAC,QAAD,CAFA;AAGZE,UAAAA,GAAG,EAAEF,IAAI,CAAC,KAAD;AAHG,SAAd,CADF;AAOD,OARmB,MAQb;AACL,aAAKC,QAAL,CAAc;AACZR,UAAAA,QAAQ,EAAE,IADE;AAEZD,UAAAA,KAAK,EAAEM;AAFK,SAAd;AAID;AACF,KAfD;AAgBD;;AAEDK,EAAAA,kBAAkB,GAAG;AACnB,QAAIC,UAAU,GAAG,KAAKlB,KAAL,CAAWQ,MAA5B;;AACA,SAAK,IAAIW,CAAT,EAAYA,CAAC,GAAGD,UAAU,CAACE,MAA3B,EAAmCD,CAAC,EAApC,EAAwC;AACtC,UAAIE,WAAW,GAAGC,QAAQ,CAACC,cAAT,CAAwBL,UAAU,CAACC,CAAD,CAAV,CAAc,OAAd,CAAxB,CAAlB;AACAE,MAAAA,WAAW,CAACG,KAAZ,CAAkBrB,KAAlB,GAA0B,SAA1B;AACD;AACF;;AAEDF,EAAAA,MAAM,GAAG;AACP,UAAM;AAAEK,MAAAA,KAAF;AAASC,MAAAA,QAAT;AAAmBC,MAAAA,MAAnB;AAA2BQ,MAAAA;AAA3B,QAAmC,KAAKhB,KAA9C;;AACA,QAAIM,KAAJ,EAAW;AACT,aAAO;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBAAaA,KAAK,CAACmB,OAAnB,CAAP;AACD,KAFD,MAEO,IAAI,CAAClB,QAAL,EAAe;AACpB,aAAO;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,sBAAP;AACD,KAFM,MAEA;AACL,aACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACGC,MAAM,CAACkB,GAAP,CAAWC,KAAK,IACf,oBAAC,KAAD;AACE,QAAA,IAAI,EAAEA,KAAK,CAACC,KADd;AAEE,QAAA,KAAK,EAAED,KAAK,CAACE,SAFf;AAGE,QAAA,KAAK,EAAEF,KAAK,CAACE,SAAN,GAAkBb,GAH3B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QADD,CADH,CADF;AAYD;AACF;;AAzDuC,C,CA2D1C;;;AAEA3B,QAAQ,CAACY,MAAT,CACE,oBAAC,WAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EADF,EAEEqB,QAAQ,CAACC,cAAT,CAAwB,MAAxB,CAFF","sourcesContent":["import React from 'react';\nimport ReactDOM from 'react-dom';\nimport styled from 'styled-components';\n\nconst Bar = styled.div`\n  background-color: red;\n  color: white;\n`\n\nconst Container = styled.div`\n  display: flex;\n  width: 100%;\n`\nconst Left_box = styled.div`\n`\nconst Right_box = styled.div`\n  display: flex;\n`\n\nclass Movie extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n    };\n  }\n  render() {\n    return (\n      <li>\n        <div>\n          <div>\n            {this.props.name}\n          </div>\n          <div>\n            <div style={{color:\"hotpink\"}}>\n              {this.props.money}\n            </div>\n          </div>\n        </div>\n      </li>\n    );\n  }\n}\n\n\nclass MyComponent extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      error: null,\n      isLoaded: false,\n      movies: []\n    };\n  }\n\n  componentDidMount() {\n    fetch(\"https://tkak5.github.io/movie/data/2019.json\"\n    ).then((response) => {if(response.ok) {\n        response.json().then((json) =>\n          this.setState({\n            isLoaded: true,\n            movies: json[\"movies\"],\n            max: json[\"max\"]\n          })\n        )\n      } else {\n        this.setState({\n          isLoaded: true,\n          error: response\n        });\n      }\n    });\n  }\n\n  componentDidUpdate() {\n    var movie_list = this.state.movies;\n    for (var i; i < movie_list.length; i++) {\n      var movie_color = document.getElementById(movie_list[i]['title']);\n      movie_color.style.color = 'hotpink';\n    }\n  }\n\n  render() {\n    const { error, isLoaded, movies, max } = this.state;\n    if (error) {\n      return <div>Error: {error.message}</div>;\n    } else if (!isLoaded) {\n      return <div>Loading...</div>;\n    } else {\n      return (\n        <ul>\n          {movies.map(movie => (\n            <Movie\n              name={movie.title}\n              money={movie.worldwide}\n              ratio={movie.worldwide / max}\n            />\n            ))\n          }\n        </ul>\n      );\n    }\n  }\n}\n// ========================================\n\nReactDOM.render(\n  <MyComponent />,\n  document.getElementById('root')\n);\n\n"]},"metadata":{},"sourceType":"module"}